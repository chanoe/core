// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProbeClient is the client API for Probe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProbeClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type probeClient struct {
	cc grpc.ClientConnInterface
}

func NewProbeClient(cc grpc.ClientConnInterface) ProbeClient {
	return &probeClient{cc}
}

func (c *probeClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Probe/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProbeServer is the server API for Probe service.
// All implementations must embed UnimplementedProbeServer
// for forward compatibility
type ProbeServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedProbeServer()
}

// UnimplementedProbeServer must be embedded to have forward compatible implementations.
type UnimplementedProbeServer struct {
}

func (UnimplementedProbeServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedProbeServer) mustEmbedUnimplementedProbeServer() {}

// UnsafeProbeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProbeServer will
// result in compilation errors.
type UnsafeProbeServer interface {
	mustEmbedUnimplementedProbeServer()
}

func RegisterProbeServer(s grpc.ServiceRegistrar, srv ProbeServer) {
	s.RegisterService(&Probe_ServiceDesc, srv)
}

func _Probe_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProbeServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Probe/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProbeServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Probe_ServiceDesc is the grpc.ServiceDesc for Probe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Probe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.core.v1.Probe",
	HandlerType: (*ProbeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Probe_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/core/v1/probe.proto",
}
