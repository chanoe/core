// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsClient is the client API for Ts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsClient interface {
	GetTsData(ctx context.Context, in *GetTsDataRequest, opts ...grpc.CallOption) (*GetTsDataResponse, error)
	DownloadTsData(ctx context.Context, in *DownloadTsDataRequest, opts ...grpc.CallOption) (*DownloadTsDataResponse, error)
	GetLatestEntities(ctx context.Context, in *GetLatestEntitiesRequest, opts ...grpc.CallOption) (*GetLatestEntitiesResponse, error)
}

type tsClient struct {
	cc grpc.ClientConnInterface
}

func NewTsClient(cc grpc.ClientConnInterface) TsClient {
	return &tsClient{cc}
}

func (c *tsClient) GetTsData(ctx context.Context, in *GetTsDataRequest, opts ...grpc.CallOption) (*GetTsDataResponse, error) {
	out := new(GetTsDataResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Ts/GetTsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsClient) DownloadTsData(ctx context.Context, in *DownloadTsDataRequest, opts ...grpc.CallOption) (*DownloadTsDataResponse, error) {
	out := new(DownloadTsDataResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Ts/DownloadTsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsClient) GetLatestEntities(ctx context.Context, in *GetLatestEntitiesRequest, opts ...grpc.CallOption) (*GetLatestEntitiesResponse, error) {
	out := new(GetLatestEntitiesResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Ts/GetLatestEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TsServer is the server API for Ts service.
// All implementations must embed UnimplementedTsServer
// for forward compatibility
type TsServer interface {
	GetTsData(context.Context, *GetTsDataRequest) (*GetTsDataResponse, error)
	DownloadTsData(context.Context, *DownloadTsDataRequest) (*DownloadTsDataResponse, error)
	GetLatestEntities(context.Context, *GetLatestEntitiesRequest) (*GetLatestEntitiesResponse, error)
	mustEmbedUnimplementedTsServer()
}

// UnimplementedTsServer must be embedded to have forward compatible implementations.
type UnimplementedTsServer struct {
}

func (UnimplementedTsServer) GetTsData(context.Context, *GetTsDataRequest) (*GetTsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTsData not implemented")
}
func (UnimplementedTsServer) DownloadTsData(context.Context, *DownloadTsDataRequest) (*DownloadTsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadTsData not implemented")
}
func (UnimplementedTsServer) GetLatestEntities(context.Context, *GetLatestEntitiesRequest) (*GetLatestEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestEntities not implemented")
}
func (UnimplementedTsServer) mustEmbedUnimplementedTsServer() {}

// UnsafeTsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsServer will
// result in compilation errors.
type UnsafeTsServer interface {
	mustEmbedUnimplementedTsServer()
}

func RegisterTsServer(s grpc.ServiceRegistrar, srv TsServer) {
	s.RegisterService(&Ts_ServiceDesc, srv)
}

func _Ts_GetTsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsServer).GetTsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Ts/GetTsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsServer).GetTsData(ctx, req.(*GetTsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ts_DownloadTsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadTsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsServer).DownloadTsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Ts/DownloadTsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsServer).DownloadTsData(ctx, req.(*DownloadTsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ts_GetLatestEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsServer).GetLatestEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Ts/GetLatestEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsServer).GetLatestEntities(ctx, req.(*GetLatestEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ts_ServiceDesc is the grpc.ServiceDesc for Ts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.core.v1.Ts",
	HandlerType: (*TsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTsData",
			Handler:    _Ts_GetTsData_Handler,
		},
		{
			MethodName: "DownloadTsData",
			Handler:    _Ts_DownloadTsData_Handler,
		},
		{
			MethodName: "GetLatestEntities",
			Handler:    _Ts_GetLatestEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/core/v1/ts.proto",
}
